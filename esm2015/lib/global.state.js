import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs/Subject';
let GlobalState = class GlobalState {
    constructor() {
        this.data = new Subject();
        this.dataStream$ = this.data.asObservable();
        this.subscriptions = new Map();
        this.dataStream$.subscribe((data) => this.onEvent(data));
    }
    publish(event, value, force = false) {
        const current = this.data[event];
        if (current !== value || force) {
            this.data[event] = value;
            this.data.next({
                event: event,
                data: this.data[event],
            });
        }
    }
    subscribe(event, callback) {
        const subscribers = this.subscriptions.get(event) || [];
        if (subscribers.indexOf(callback) < 0) {
            subscribers.push(callback);
        }
        this.subscriptions.set(event, subscribers);
    }
    onEvent(data) {
        const subscribers = this.subscriptions.get(data['event']) || [];
        subscribers.forEach((callback) => {
            callback.call(null, data['data']);
        });
    }
};
GlobalState = __decorate([
    Injectable()
], GlobalState);
export { GlobalState };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xvYmFsLnN0YXRlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWNvcmVhcGktcHJveHkvIiwic291cmNlcyI6WyJsaWIvZ2xvYmFsLnN0YXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFHdkMsSUFBYSxXQUFXLEdBQXhCLE1BQWEsV0FBVztJQU90QjtRQUxRLFNBQUksR0FBRyxJQUFJLE9BQU8sRUFBVSxDQUFDO1FBQzdCLGdCQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUV2QyxrQkFBYSxHQUFpQyxJQUFJLEdBQUcsRUFBMkIsQ0FBQztRQUd2RixJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFRCxPQUFPLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSztRQUNqQyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2pDLElBQUksT0FBTyxLQUFLLEtBQUssSUFBSSxLQUFLLEVBQUU7WUFDOUIsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUM7WUFFekIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7Z0JBQ2IsS0FBSyxFQUFFLEtBQUs7Z0JBQ1osSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO2FBQ3ZCLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztJQUVELFNBQVMsQ0FBQyxLQUFhLEVBQUUsUUFBa0I7UUFDekMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3hELElBQUksV0FBVyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDckMsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUM1QjtRQUNELElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxXQUFXLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsT0FBTyxDQUFDLElBQVM7UUFDZixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDaEUsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQy9CLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ3BDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGLENBQUE7QUFyQ1ksV0FBVztJQUR2QixVQUFVLEVBQUU7R0FDQSxXQUFXLENBcUN2QjtTQXJDWSxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMvU3ViamVjdCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBHbG9iYWxTdGF0ZSB7XG5cbiAgcHJpdmF0ZSBkYXRhID0gbmV3IFN1YmplY3Q8T2JqZWN0PigpO1xuICBwcml2YXRlIGRhdGFTdHJlYW0kID0gdGhpcy5kYXRhLmFzT2JzZXJ2YWJsZSgpO1xuXG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uczogTWFwPHN0cmluZywgQXJyYXk8RnVuY3Rpb24+PiA9IG5ldyBNYXA8c3RyaW5nLCBBcnJheTxGdW5jdGlvbj4+KCk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5kYXRhU3RyZWFtJC5zdWJzY3JpYmUoKGRhdGEpID0+IHRoaXMub25FdmVudChkYXRhKSk7XG4gIH1cblxuICBwdWJsaXNoKGV2ZW50LCB2YWx1ZSwgZm9yY2UgPSBmYWxzZSkge1xuICAgIGNvbnN0IGN1cnJlbnQgPSB0aGlzLmRhdGFbZXZlbnRdO1xuICAgIGlmIChjdXJyZW50ICE9PSB2YWx1ZSB8fCBmb3JjZSkge1xuICAgICAgdGhpcy5kYXRhW2V2ZW50XSA9IHZhbHVlO1xuXG4gICAgICB0aGlzLmRhdGEubmV4dCh7XG4gICAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgICAgZGF0YTogdGhpcy5kYXRhW2V2ZW50XSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHN1YnNjcmliZShldmVudDogc3RyaW5nLCBjYWxsYmFjazogRnVuY3Rpb24pIHtcbiAgICBjb25zdCBzdWJzY3JpYmVycyA9IHRoaXMuc3Vic2NyaXB0aW9ucy5nZXQoZXZlbnQpIHx8IFtdO1xuICAgIGlmIChzdWJzY3JpYmVycy5pbmRleE9mKGNhbGxiYWNrKSA8IDApIHtcbiAgICAgIHN1YnNjcmliZXJzLnB1c2goY2FsbGJhY2spO1xuICAgIH1cbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMuc2V0KGV2ZW50LCBzdWJzY3JpYmVycyk7XG4gIH1cblxuICBvbkV2ZW50KGRhdGE6IGFueSkge1xuICAgIGNvbnN0IHN1YnNjcmliZXJzID0gdGhpcy5zdWJzY3JpcHRpb25zLmdldChkYXRhWydldmVudCddKSB8fCBbXTtcbiAgICBzdWJzY3JpYmVycy5mb3JFYWNoKChjYWxsYmFjaykgPT4ge1xuICAgICAgY2FsbGJhY2suY2FsbChudWxsLCBkYXRhWydkYXRhJ10pO1xuICAgIH0pO1xuICB9XG59XG4iXX0=